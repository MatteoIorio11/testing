/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import kotlin.random.Random
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertTrue
import kotlin.test.fail

class AppTest {
    @Test fun appHasAGreeting() {
        val classUnderTest = App()
        assertNotNull(classUnderTest.greeting, "app should have a greeting")
    }

    @Test fun randoFail() {
        val randomNumber = Random.nextInt()
        assertEquals(randomNumber, randomNumber)
    }

    @Test fun rando() {
        val randomNumber = Random.nextInt()
        assertEquals(randomNumber, randomNumber)
    }

    @Test fun havingFun() {
//        assert(false)
        assertTrue(true)
    }

    @Test fun alwaysTrue() {
        assertTrue { true }
    }

    @Test fun bfs() {
        val queue = ArrayDeque(listOf(1))
        val seen: MutableSet<Int> = HashSet()
        while (queue.isNotEmpty()) {
            val node = queue.removeFirst()
            if (seen.contains(node)) {
                continue
            }
            seen.add(node)
            for (next: Int in computeNext(node = node)) {
                queue.add(next)
            }
        }
    }

    private fun computeNext(node: Int): List<Int> {
        return listOf()
    }

    @Test fun alwaysFail() {
        System.getenv("fail")?.let {
            fail(message = "app failed as expected")
        }
    }
}
